{"version":3,"sources":["utils/localStorage.js","Components/About.jsx","Components/Cart.jsx","Components/Home.jsx","Components/Login.jsx","Redux/AuthReducer/actions.js","Redux/AuthReducer/actionsType.js","Components/Products.jsx","Redux/AppReducer/actions.js","Redux/AppReducer/actionsType.js","Components/ProductsDetails.jsx","Components/AllRoutes.jsx","App.js","serviceWorker.js","Redux/AppReducer/reducer.js","Redux/AuthReducer/reducer.js","Redux/AppReducer/store.js","index.js"],"names":["loadData","key","temp","localStorage","getItem","JSON","parse","e","saveData","data","setItem","stringify","About","Cart","items","sum","map","plus","Number","price","length","d","id","src","image","alt","width","title","Home","token","console","log","Login","useState","email","password","form","setForm","handleOnChange","target","name","value","dispatch","useDispatch","navigate","useNavigate","onSubmit","preventDefault","payload","type","axios","post","then","r","getLogSuccess","alert","catch","placeholder","onChange","Products","useSelector","state","products","AppReducer","isLoading","isError","useEffect","get","res","err","to","ProductsDetails","setdata","params","useParams","onClick","cart","push","window","location","reload","AllRoutes","isAuth","path","element","App","auth","AuthReducer","className","Boolean","hostname","match","initState","status","isLoginLoading","isLoginError","rootReducer","combineReducers","oldState","tokn","store","legacy_createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17216acb.chunk.js","sourcesContent":["const loadData = (key) => {\r\n   try{\r\n          let temp = localStorage.getItem(key)\r\n          temp = JSON.parse(temp)\r\n          return temp;\r\n   }\r\n   catch (e) {\r\n    return undefined\r\n   } \r\n}\r\n\r\nconst saveData = (key,data) => {\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n}\r\n\r\nexport {loadData,saveData}","import React from 'react'\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>About</div>\r\n  )\r\n}\r\n\r\nexport default About","import React from 'react'\r\nimport axios from \"axios\"\r\nimport { loadData, saveData } from '../utils/localStorage'\r\n\r\nconst Cart = () => {\r\n    const items = loadData(\"cart\")\r\n  let sum = 0\r\n  if(items){\r\n    items.map((plus)=> {\r\n    return sum+= Number(plus.price)\r\n  })\r\n}\r\n\r\n  if(items){\r\n    var length = items.length\r\n    saveData(\"length\", length)\r\n  }\r\n  return ( <>\r\n    <div>Cart</div>  {length ? <h2>You Have {length} Items and Total is ${sum} </h2> : null}\r\n      {items ? items.map((d)=> (\r\n        <div key={d.id}>\r\n            <img src={d.image} alt=\"\" width=\"100px\" />\r\n            <h1>{d.price}</h1>\r\n            <h4>{d.title}</h4>\r\n             <button >Remove From Cart</button>\r\n        </div>\r\n      ))  : <h1>No Items In Cart</h1>}\r\n    \r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Cart","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { loadData } from '../utils/localStorage'\r\n\r\nconst Home = () => {\r\n    const token = loadData(\"token\")\r\n    console.log(token)\r\n  return (\r\n    <div>Home\r\n\r\n<div>Token : {token ? token.token : null}</div>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default Home","import React, { useState } from 'react'\r\nimport {useNavigate} from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport { getLogFailure, getLogRequest, getLogSuccess } from '../Redux/AuthReducer/actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { saveData } from '../utils/localStorage';\r\n\r\nconst Login = () => {\r\n//    const [email,setEmail] = useState(\"\");\r\n//    const [password,setPassword] = useState(\"\")\r\n\r\nconst [form,setForm] = useState({\r\n    email: \"eve.holt@reqres.in\",\r\n    password: \"cityslicka\"\r\n})\r\n\r\nconst handleOnChange = (e)=> {\r\n    const {name,value} = e.target\r\n\r\n    setForm({\r\n        ...form,\r\n        [name]: value\r\n    })\r\n}\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n\r\n    const handleOnSubmit = (e)=> {\r\n        e.preventDefault()\r\n        if(form.email && form.password){\r\n           const payload = {\r\n            email : form.email,\r\n            password : form.password\r\n           }\r\n\r\n             dispatch(getLogRequest())\r\n             axios.post(\"https://reqres.in/api/login\",payload)\r\n             .then((r)=>{ dispatch(getLogSuccess(r.data))\r\n                alert(\"Succeed\")\r\n             navigate(\"/\")\r\n            })\r\n             .catch(()=> {dispatch(getLogFailure()) \r\n                alert(\"Please Enter Valid Details\")\r\n            })\r\n            \r\n        }\r\n        else {\r\n        alert(\"Please Enter Valid Details\")\r\n        }\r\n    }\r\n  return (\r\n    <div>Login\r\n   \r\n\r\n     <form onSubmit={handleOnSubmit}>\r\n        <input type=\"email\"\r\n        placeholder='Enter Your Email'\r\n        name=\"email\"\r\n        value={form.email}\r\n         onChange={handleOnChange}\r\n        /> <br /> <br />\r\n        <input type=\"password\"\r\n        placeholder='Enter Your Password'\r\n        name=\"password\"\r\n        value={form.password}\r\n        onChange={handleOnChange}\r\n        /> <br /> <br />\r\n        <button>Login</button>\r\n     </form>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login","import { getLoginFailure, getLoginRequest, getLoginSuccess } from \"./actionsType\"\r\n\r\nexport const getLogRequest = () => {\r\n    return {\r\n        type : getLoginRequest\r\n    }\r\n}\r\n\r\nexport const getLogFailure = () => {\r\n    return {\r\n        type : getLoginFailure\r\n    }\r\n}\r\n\r\nexport const getLogSuccess = (payload)=> {\r\n    return {\r\n        type : getLoginSuccess,payload\r\n    }\r\n}","export const getLoginRequest = \"GET_LOGIN_REQUEST\";\r\nexport const getLoginFailure = \"GET_LOGIN_FAILURE\";\r\nexport const getLoginSuccess = \"GET_LOGIN_SUCCESS\";","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {Link} from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport { getProductsFailure, getProductsRequest, getProductsSuccess } from '../Redux/AppReducer/actionsType'\r\nimport { getPFailure, getPRequest, getPsuccess } from '../Redux/AppReducer/actions'\r\n\r\nconst Products = () => {\r\n\r\n    const { products, isLoading, isError } = useSelector((state) => {\r\n        return {\r\n            products: state.AppReducer.products,\r\n          isLoading: state.AppReducer.isLoading,\r\n          isError: state.AppReducer.isError\r\n        };\r\n      });\r\n    \r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const getProducts = () => {\r\n        dispatch(getPRequest())\r\n        return axios.get(\"http://localhost:8080/products\")\r\n               .then((res) => {\r\n                console.log(res.data)\r\n                dispatch(getPsuccess(res.data))\r\n               }).catch((err)=> dispatch(getPFailure()))\r\n    }\r\n\r\n    useEffect(()=> {\r\n      getProducts()\r\n    },[])\r\n    console.log(\"products is : \", products)\r\n  return isLoading ? (<div>...Laoding</div>) : isError ?\r\n   (<div>...Something Went Wrong</div>) :\r\n    (\r\n    <div>Products\r\n   {products.length >= 0 && products.map((data)=> (\r\n    <Link key={data.id} to={`/products/${data.id}`}><div >{data.id}</div></Link>\r\n   ))}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Products","import { getProductsFailure, getProductsRequest, getProductsSuccess } from \"./actionsType\"\r\n\r\nexport const getPRequest = () => {\r\n    return {\r\n        type: getProductsRequest\r\n    }\r\n}\r\n\r\nexport const getPFailure = () => {\r\n    return {\r\n        type: getProductsFailure\r\n    }\r\n}\r\n\r\nexport const getPsuccess = (payload) => {\r\n    return {\r\n        type:getProductsSuccess,payload\r\n    }\r\n}","export const getProductsRequest = \"GET_PRODUCTS_REUEST\";\r\nexport const getProductsFailure = \"GET_PRODUCTS_FAILURE\";\r\nexport const getProductsSuccess = \"GET_PRODUCTS_SUCCESS\";\r\n","import React, { useEffect, useState } from 'react'\r\nimport {useParams } from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport { loadData, saveData } from '../utils/localStorage'\r\nconst ProductsDetails = () => {\r\n    const [data,setdata] = useState([])\r\n    const params = useParams()\r\n  \r\n   const get = () => {\r\n    axios.get(`http://localhost:8080/products/${params.id}`)\r\n    .then((res)=> setdata(res.data))\r\n    .catch((err)=> alert(err))\r\n   }\r\n\r\n   useEffect(()=> {\r\n     get()\r\n   },[])\r\n\r\n    const addToCart = () => {\r\n        let cart = loadData(\"cart\")||[];\r\n        cart.push(data)\r\n        saveData(\"cart\",cart)\r\n        alert(\"Added\")\r\n        window. location. reload(false)\r\n        \r\n    }\r\n   \r\n  return ( <>\r\n    <div>ProductsDetails\r\n  \r\n     \r\n\r\n    </div>\r\n    <img src={data.image} alt=\"\" width=\"100px\"/>\r\n    <h1>{data.price}</h1>\r\n     <button onClick={addToCart}>Add To Cart</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductsDetails","import React from 'react'\r\nimport {Routes,Route,Link} from \"react-router-dom\"\r\nimport { loadData } from '../utils/localStorage'\r\nimport About from './About'\r\nimport Cart from './Cart'\r\nimport Home from './Home'\r\nimport Login from './Login'\r\nimport Products from './Products'\r\nimport ProductsDetails from './ProductsDetails'\r\n\r\nconst AllRoutes = () => {\r\n\r\n    const items = loadData(\"cart\")\r\n    if(items){\r\n        var length = items.length\r\n      }\r\n    \r\n    console.log(\"length from LocalStorage is \", length)\r\n    const isAuth = loadData(\"isAuth\")\r\n  return (\r\n    <div>\r\n\r\n     <Link to='/'>Home</Link>  {\"   \"} \r\n       <Link to='/products'>Products</Link> {\" \"}\r\n     <Link to='/about'>About</Link> {\" \"}\r\n     <Link to='/login'>Login</Link> {\" \"}\r\n     <Link to='/cart'>Cart</Link> {length ? <span>{length}  </span> : 0} {\" \"}\r\n    \r\n\r\n\r\n\r\n\r\n        <Routes>\r\n            <Route path='/' element={<Home />} />\r\n            <Route path='/about' element={isAuth ? <About /> : <Login />} />\r\n            <Route path='/cart' element={isAuth ? <Cart /> : <Login />} />\r\n            <Route path='/login' element={<Login />} />\r\n            <Route path='/products' element={isAuth ? <Products /> : <Login />} />\r\n            <Route path='/products/:id' element={<ProductsDetails />} />\r\n        </Routes>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AllRoutes","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.css';\nimport AllRoutes from './Components/AllRoutes';\n\nfunction App() {\n\n  const products = useSelector(state=> state.AppReducer.products)\n  const {auth, token} = useSelector(state => {\n    return {\n      auth : state.AuthReducer.isAuth,\n      token: state.AuthReducer.token\n    }\n  })\n\n  console.log(\"isAuth : \",auth)\n  console.log('Token :  ',token)\n\n  return ( \n    <div className=\"App\">\n      <AllRoutes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { loadData, saveData } from \"../../utils/localStorage\"\r\nimport { getProductsFailure, getProductsRequest, getProductsSuccess } from \"./actionsType\"\r\n\r\nconst initState = {\r\n    products :  [],\r\n    status : false,\r\n    isLoading : false,\r\n    isError : false,\r\n}\r\n\r\nexport const reducer = (oldState = initState, {type,payload}) => {\r\nswitch(type) {\r\n    case getProductsRequest : {\r\n        return {\r\n            ...oldState,\r\n            isLoading :true,\r\n            isError : false\r\n        }\r\n    }\r\n    case getProductsFailure : {\r\n      return {\r\n        ...oldState,\r\n       isError : true\r\n      }\r\n    }\r\n    case getProductsSuccess : {\r\n      \r\n      return {\r\n        ...oldState,\r\n        isLoading: false,\r\n        isError: false,\r\n        products : [...payload]\r\n      }\r\n    }\r\n    default :\r\n    return oldState\r\n}\r\n}","import { loadData, saveData } from \"../../utils/localStorage\"\r\nimport { getLogRequest, getLogSuccess } from \"./actions\"\r\nimport { getLoginFailure, getLoginRequest, getLoginSuccess } from \"./actionsType\"\r\n\r\nconst initState = {\r\n    isLoginLoading : false,\r\n    isLoginError : false,\r\n    token : '',\r\n    isAuth : loadData(\"isAuth\") || false\r\n}\r\n\r\nexport  const reducer = (oldState = initState, {type,payload}) => {\r\n    switch(type){\r\n\r\n        case getLoginRequest : {\r\n            return {\r\n               ...oldState , isLoginLoading : true,\r\n               isLoginError : false\r\n            }\r\n        }\r\n        case getLoginFailure :  {\r\n     return {\r\n        ...oldState, isLoginLoading: false,\r\n        isLoginError: true\r\n     }\r\n        }    \r\n\r\n        case getLoginSuccess : {\r\n              let tokn = payload;\r\n              const auth = true;\r\n              saveData(\"isAuth\",auth)\r\n              saveData(\"token\",tokn)\r\n             return {\r\n                ...oldState,\r\n                isLoginLoading : false,\r\n                isLoginError: false,\r\n                token: tokn,\r\n                isAuth: auth\r\n             }\r\n        }\r\n        default : \r\n        return oldState\r\n    }\r\n}","import { legacy_createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { reducer as AppReducer } from \"./reducer\";\r\nimport {reducer as AuthReducer } from \"../AuthReducer/reducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    AppReducer,\r\n    AuthReducer\r\n  });\r\n  export const store = legacy_createStore(\r\n    rootReducer,\r\n   // applyMiddleware(logger1, logger2)\r\n  );","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\"\nimport {Provider} from \"react-redux\"\nimport { store } from './Redux/AppReducer/store';\n\nReactDOM.render(\n<BrowserRouter>\n<Provider store={store}>\n<App />\n</Provider>\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}